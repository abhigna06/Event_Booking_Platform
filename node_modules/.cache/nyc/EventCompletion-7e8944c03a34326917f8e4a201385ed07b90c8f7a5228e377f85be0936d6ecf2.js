// const express = require('express');
// const router = express.Router();
// const Event = require('../models/Event'); 
// const User = require('../models/User');
// const Admin = require('../models/Admin'); 
// // Middleware to update event completion status based on user's bookings
// const updateEventCompletionStatusMiddleware = async (req, res, next) => {
//     try {
//         const userId = req.params.userId; 
//         const user = await User.findById(userId).populate('bookings.eventId'); 
//          console.log(user.bookings.eventId);
//         // Logic to update event completion status
//         if (user && user.bookings.length > 0) {
//             const currentDate = new Date();
//             for (const booking of user.bookings) {
//                 console.log(booking);
//                 if (booking.eventId.date < currentDate) {
//                     booking.eventId.completed = true;
//                 } else {
//                     booking.eventId.completed = false;
//                 }
//                 await booking.eventId.save(); // Save the updated event
//             }
//         }
//         next(); // Move to the next middleware or route handler
//     } catch (error) {
//         // Handle errors
//         console.error('Error updating event completion status:', error);
//         next(error); // Pass the error to the error handler middleware
//     }
// };
// const adminUpdateEventCompletionStatusMiddleware = async (req, res, next) => {
//     try {
//         const adminId = req.params.adminId; 
//         const admin = await Admin.find({ _id: adminId });
//         const events = await Event.find({ postedBy: adminId });
//         // Logic to update event completion status
//         if (events && events.length > 0) {
//             const currentDate = new Date();
//             for (const event of events) {
//                 if (event.date < currentDate) {
//                     event.completed = true;
//                 } else {
//                     event.completed = false;
//                 }
//                 await event.save(); 
//             }
//         }
//         next(); // Move to the next middleware or route handler
//     } catch (error) {
//         // Handle errors
//         console.error('Error updating event completion status:', error);
//         next(error); // Pass the error to the error handler middleware
//     }
// };
// module.exports = {updateEventCompletionStatusMiddleware, adminUpdateEventCompletionStatusMiddleware};
function cov_1jo5b2h26i(){var path="/home/abhigna.t/EventEasee/middlewares/EventCompletion.js";var hash="5b89a20820ad39299f2f62cca73749c4f6a18397";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/abhigna.t/EventEasee/middlewares/EventCompletion.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5b89a20820ad39299f2f62cca73749c4f6a18397"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1jo5b2h26i=function(){return actualCoverage;};}return actualCoverage;}cov_1jo5b2h26i();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWpvNWIyaDI2aSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiXSwic291cmNlcyI6WyJFdmVudENvbXBsZXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbi8vIGNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4vLyBjb25zdCBFdmVudCA9IHJlcXVpcmUoJy4uL21vZGVscy9FdmVudCcpOyBcbi8vIGNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9tb2RlbHMvVXNlcicpO1xuLy8gY29uc3QgQWRtaW4gPSByZXF1aXJlKCcuLi9tb2RlbHMvQWRtaW4nKTsgXG5cbi8vIC8vIE1pZGRsZXdhcmUgdG8gdXBkYXRlIGV2ZW50IGNvbXBsZXRpb24gc3RhdHVzIGJhc2VkIG9uIHVzZXIncyBib29raW5nc1xuLy8gY29uc3QgdXBkYXRlRXZlbnRDb21wbGV0aW9uU3RhdHVzTWlkZGxld2FyZSA9IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuLy8gICAgIHRyeSB7XG4vLyAgICAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5wYXJhbXMudXNlcklkOyBcbi8vICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQodXNlcklkKS5wb3B1bGF0ZSgnYm9va2luZ3MuZXZlbnRJZCcpOyBcbi8vICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXIuYm9va2luZ3MuZXZlbnRJZCk7XG4vLyAgICAgICAgIC8vIExvZ2ljIHRvIHVwZGF0ZSBldmVudCBjb21wbGV0aW9uIHN0YXR1c1xuLy8gICAgICAgICBpZiAodXNlciAmJiB1c2VyLmJvb2tpbmdzLmxlbmd0aCA+IDApIHtcbi8vICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbi8vICAgICAgICAgICAgIGZvciAoY29uc3QgYm9va2luZyBvZiB1c2VyLmJvb2tpbmdzKSB7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYm9va2luZyk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKGJvb2tpbmcuZXZlbnRJZC5kYXRlIDwgY3VycmVudERhdGUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgYm9va2luZy5ldmVudElkLmNvbXBsZXRlZCA9IHRydWU7XG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgYm9va2luZy5ldmVudElkLmNvbXBsZXRlZCA9IGZhbHNlO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICBhd2FpdCBib29raW5nLmV2ZW50SWQuc2F2ZSgpOyAvLyBTYXZlIHRoZSB1cGRhdGVkIGV2ZW50XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cblxuLy8gICAgICAgICBuZXh0KCk7IC8vIE1vdmUgdG8gdGhlIG5leHQgbWlkZGxld2FyZSBvciByb3V0ZSBoYW5kbGVyXG4vLyAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbi8vICAgICAgICAgLy8gSGFuZGxlIGVycm9yc1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBldmVudCBjb21wbGV0aW9uIHN0YXR1czonLCBlcnJvcik7XG4vLyAgICAgICAgIG5leHQoZXJyb3IpOyAvLyBQYXNzIHRoZSBlcnJvciB0byB0aGUgZXJyb3IgaGFuZGxlciBtaWRkbGV3YXJlXG4vLyAgICAgfVxuLy8gfTtcblxuLy8gY29uc3QgYWRtaW5VcGRhdGVFdmVudENvbXBsZXRpb25TdGF0dXNNaWRkbGV3YXJlID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4vLyAgICAgdHJ5IHtcbi8vICAgICAgICAgY29uc3QgYWRtaW5JZCA9IHJlcS5wYXJhbXMuYWRtaW5JZDsgXG4vLyAgICAgICAgIGNvbnN0IGFkbWluID0gYXdhaXQgQWRtaW4uZmluZCh7IF9pZDogYWRtaW5JZCB9KTtcbi8vICAgICAgICAgY29uc3QgZXZlbnRzID0gYXdhaXQgRXZlbnQuZmluZCh7IHBvc3RlZEJ5OiBhZG1pbklkIH0pO1xuLy8gICAgICAgICAvLyBMb2dpYyB0byB1cGRhdGUgZXZlbnQgY29tcGxldGlvbiBzdGF0dXNcbi8vICAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMubGVuZ3RoID4gMCkge1xuLy8gICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuLy8gICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0ZSA8IGN1cnJlbnREYXRlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNvbXBsZXRlZCA9IHRydWU7XG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY29tcGxldGVkID0gZmFsc2U7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIGF3YWl0IGV2ZW50LnNhdmUoKTsgXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cblxuLy8gICAgICAgICBuZXh0KCk7IC8vIE1vdmUgdG8gdGhlIG5leHQgbWlkZGxld2FyZSBvciByb3V0ZSBoYW5kbGVyXG4vLyAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbi8vICAgICAgICAgLy8gSGFuZGxlIGVycm9yc1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBldmVudCBjb21wbGV0aW9uIHN0YXR1czonLCBlcnJvcik7XG4vLyAgICAgICAgIG5leHQoZXJyb3IpOyAvLyBQYXNzIHRoZSBlcnJvciB0byB0aGUgZXJyb3IgaGFuZGxlciBtaWRkbGV3YXJlXG4vLyAgICAgfVxuLy8gfTtcblxuXG4vLyBtb2R1bGUuZXhwb3J0cyA9IHt1cGRhdGVFdmVudENvbXBsZXRpb25TdGF0dXNNaWRkbGV3YXJlLCBhZG1pblVwZGF0ZUV2ZW50Q29tcGxldGlvblN0YXR1c01pZGRsZXdhcmV9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQUEsU0FBQUEsZUFBQSxNQUFBQyxJQUFBLGlFQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSw2REFBQU0sWUFBQSxJQUFBQyxLQUFBLElBQUFDLFNBQUEsSUFBQUMsQ0FBQSxJQUFBQyxDQUFBLElBQUFDLENBQUEsSUFBQUMsZUFBQSw0Q0FBQVgsSUFBQSxpREFBQVksUUFBQSxDQUFBWCxNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFTLFFBQUEsQ0FBQWIsSUFBQSxHQUFBYSxRQUFBLENBQUFiLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUFZLFFBQUEsQ0FBQWIsSUFBQSxFQUFBSyxZQUFBLE1BQUFTLGNBQUEsQ0FBQUQsUUFBQSxDQUFBYixJQUFBLEdBL0NZO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBZSxjQUFBLFdBQUFBLGNBQUEsRUFBQWYsY0FBQSJ9