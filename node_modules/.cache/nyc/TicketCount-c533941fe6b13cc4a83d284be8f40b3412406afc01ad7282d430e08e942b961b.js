// const Event = require('./Event');
// async function getAvailableTicketsFromDatabase (eventId) {
//     try {
//         const event = await Event.findById(eventId);
//         if (!event) {
//             return 0; // Event not found
//         }
//         return event.no_of_tickets;
//     } catch (error) {
//         console.error('Error fetching available tickets:', error);
//         throw error;
//     }
// }
// async function updateTicketCountInDatabase(eventId, tickets){
//     try {
//         const event = await Event.findById(eventId);
//         if (!event) {
//             return false; // Event not found
//         }
//         const remainingTickets = event.no_of_tickets - tickets;
//         if (remainingTickets < 0) {
//             return false; // Insufficient tickets
//         }
//         event.no_of_tickets = remainingTickets;
//         await event.save();
//         return true; // Ticket count updated successfully
//     } catch (error) {
//         console.error('Error updating ticket count:', error);
//         throw error;
//     }
// }
// module.exports = { getAvailableTicketsFromDatabase, updateTicketCountInDatabase};
function cov_1x8aq8babk(){var path="/home/abhigna.t/EventEasee/models/TicketCount.js";var hash="0cae6ba93dbb57faac65cd601dd9891982365710";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/abhigna.t/EventEasee/models/TicketCount.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0cae6ba93dbb57faac65cd601dd9891982365710"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1x8aq8babk=function(){return actualCoverage;};}return actualCoverage;}cov_1x8aq8babk();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXg4YXE4YmFiayIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJmbk1hcCIsImJyYW5jaE1hcCIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiXSwic291cmNlcyI6WyJUaWNrZXRDb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb25zdCBFdmVudCA9IHJlcXVpcmUoJy4vRXZlbnQnKTtcblxuLy8gYXN5bmMgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlVGlja2V0c0Zyb21EYXRhYmFzZSAoZXZlbnRJZCkge1xuLy8gICAgIHRyeSB7XG4vLyAgICAgICAgIGNvbnN0IGV2ZW50ID0gYXdhaXQgRXZlbnQuZmluZEJ5SWQoZXZlbnRJZCk7XG4vLyAgICAgICAgIGlmICghZXZlbnQpIHtcbi8vICAgICAgICAgICAgIHJldHVybiAwOyAvLyBFdmVudCBub3QgZm91bmRcbi8vICAgICAgICAgfVxuLy8gICAgICAgICByZXR1cm4gZXZlbnQubm9fb2ZfdGlja2V0cztcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhdmFpbGFibGUgdGlja2V0czonLCBlcnJvcik7XG4vLyAgICAgICAgIHRocm93IGVycm9yO1xuLy8gICAgIH1cblxuLy8gfVxuXG4vLyBhc3luYyBmdW5jdGlvbiB1cGRhdGVUaWNrZXRDb3VudEluRGF0YWJhc2UoZXZlbnRJZCwgdGlja2V0cyl7XG4vLyAgICAgdHJ5IHtcbi8vICAgICAgICAgY29uc3QgZXZlbnQgPSBhd2FpdCBFdmVudC5maW5kQnlJZChldmVudElkKTtcbi8vICAgICAgICAgaWYgKCFldmVudCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBFdmVudCBub3QgZm91bmRcbi8vICAgICAgICAgfVxuLy8gICAgICAgICBjb25zdCByZW1haW5pbmdUaWNrZXRzID0gZXZlbnQubm9fb2ZfdGlja2V0cyAtIHRpY2tldHM7XG4vLyAgICAgICAgIGlmIChyZW1haW5pbmdUaWNrZXRzIDwgMCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJbnN1ZmZpY2llbnQgdGlja2V0c1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGV2ZW50Lm5vX29mX3RpY2tldHMgPSByZW1haW5pbmdUaWNrZXRzO1xuLy8gICAgICAgICBhd2FpdCBldmVudC5zYXZlKCk7XG4vLyAgICAgICAgIHJldHVybiB0cnVlOyAvLyBUaWNrZXQgY291bnQgdXBkYXRlZCBzdWNjZXNzZnVsbHlcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyB0aWNrZXQgY291bnQ6JywgZXJyb3IpO1xuLy8gICAgICAgICB0aHJvdyBlcnJvcjtcbi8vICAgICB9XG5cbi8vIH1cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSB7IGdldEF2YWlsYWJsZVRpY2tldHNGcm9tRGF0YWJhc2UsIHVwZGF0ZVRpY2tldENvdW50SW5EYXRhYmFzZX07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQUEsU0FBQUEsZUFBQSxNQUFBQyxJQUFBLHdEQUFBQyxJQUFBLGdEQUFBQyxNQUFBLEtBQUFDLFFBQUEsc0JBQUFDLEdBQUEsb0JBQUFDLFlBQUEsRUFBQUwsSUFBQSxvREFBQU0sWUFBQSxJQUFBQyxLQUFBLElBQUFDLFNBQUEsSUFBQUMsQ0FBQSxJQUFBQyxDQUFBLElBQUFDLENBQUEsSUFBQUMsZUFBQSw0Q0FBQVgsSUFBQSxpREFBQVksUUFBQSxDQUFBWCxNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLFVBQUFTLFFBQUEsQ0FBQWIsSUFBQSxHQUFBYSxRQUFBLENBQUFiLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUFZLFFBQUEsQ0FBQWIsSUFBQSxFQUFBSyxZQUFBLE1BQUFTLGNBQUEsQ0FBQUQsUUFBQSxDQUFBYixJQUFBLEdBckJZO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBZSxjQUFBLFdBQUFBLGNBQUEsRUFBQWYsY0FBQSJ9